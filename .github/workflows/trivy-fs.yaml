name: Trivy FS Scan

on:
  workflow_call:
    inputs:
      scan-path:
        description: "Path to scan (default: current directory)"
        required: false
        default: "."
        type: string

jobs:
  trivy-fs-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2️⃣ Cache Trivy DB
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}
          restore-keys: trivy-db-${{ runner.os }}

      # 3️⃣ Run Trivy FS Scan (JSON output)
      - name: Run Trivy FS Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: ${{ inputs.scan-path }}
          format: json
          output: trivy-fs-report.json

      # 4️⃣ Generate fully dynamic HTML report
      - name: Generate HTML report
        run: |
          mkdir -p trivy-report
          JSON=$(jq -c . trivy-fs-report.json)
          cat <<EOF > trivy-report/trivy-fs-report.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Trivy Filesystem Scan Report</title>
<style>
  body { font-family: Arial, sans-serif; background: #f4f4f4; padding: 20px; }
  h1 { color: #333; }
  details { margin-bottom: 10px; background: #fff; padding: 10px; border-radius: 5px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
  summary { font-weight: bold; cursor: pointer; }
  .LOW { color: green; font-weight: bold; }
  .MEDIUM { color: orange; font-weight: bold; }
  .HIGH { color: red; font-weight: bold; }
  .CRITICAL { color: darkred; font-weight: bold; }
  table { width: 100%; border-collapse: collapse; margin-top: 5px; }
  th, td { border: 1px solid #ccc; padding: 5px; text-align: left; }
  th { background: #eee; }
</style>
</head>
<body>
<h1>Trivy Filesystem Scan Report</h1>
<div id="report"></div>
<script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
<script>
const data = $JSON;
// Group vulnerabilities by Target (file/directory)
const targets = _.groupBy(data.Vulnerabilities || [], 'Target');

for (const [target, vulns] of Object.entries(targets)) {
  const detail = document.createElement('details');
  const summary = document.createElement('summary');
  summary.textContent = target;
  detail.appendChild(summary);

  const table = document.createElement('table');
  const header = document.createElement('tr');
  ['Severity','Vulnerability','Package','Installed Version','Description'].forEach(h => {
    const th = document.createElement('th');
    th.textContent = h;
    header.appendChild(th);
  });
  table.appendChild(header);

  vulns.forEach(v => {
    const tr = document.createElement('tr');
    tr.innerHTML = \`
      <td class="\${v.Severity}">\${v.Severity}</td>
      <td>\${v.VulnerabilityID}</td>
      <td>\${v.PkgName}</td>
      <td>\${v.InstalledVersion}</td>
      <td>\${v.Description || ''}</td>
    \`;
    table.appendChild(tr);
  });

  detail.appendChild(table);
  document.getElementById('report').appendChild(detail);
}
</script>
</body>
</html>
EOF

      # 5️⃣ Upload HTML report as artifact (single HTML file)
      
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-report-html
          path: trivy-report/trivy-fs-report.html
